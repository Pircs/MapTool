// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TmxMapMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TmxMapMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* TmxMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_ImgSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_ImgSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_TileImg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_TileImg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_TileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_TileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_TileSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_TileSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmxMap_Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmxMap_Layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TmxMap_BarrerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TmxMapMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TmxMapMessage_2eproto() {
  protobuf_AddDesc_TmxMapMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TmxMapMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TmxMap_descriptor_ = file->message_type(0);
  static const int TmxMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, imgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, tileimgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, layers_),
  };
  TmxMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_descriptor_,
      TmxMap::internal_default_instance(),
      TmxMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap, _internal_metadata_));
  TmxMap_Rect_descriptor_ = TmxMap_descriptor_->nested_type(0);
  static const int TmxMap_Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Rect, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Rect, h_),
  };
  TmxMap_Rect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_Rect_descriptor_,
      TmxMap_Rect::internal_default_instance(),
      TmxMap_Rect_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_Rect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Rect, _internal_metadata_));
  TmxMap_Point_descriptor_ = TmxMap_descriptor_->nested_type(1);
  static const int TmxMap_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Point, y_),
  };
  TmxMap_Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_Point_descriptor_,
      TmxMap_Point::internal_default_instance(),
      TmxMap_Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Point, _internal_metadata_));
  TmxMap_ImgSet_descriptor_ = TmxMap_descriptor_->nested_type(2);
  static const int TmxMap_ImgSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_ImgSet, path_),
  };
  TmxMap_ImgSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_ImgSet_descriptor_,
      TmxMap_ImgSet::internal_default_instance(),
      TmxMap_ImgSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_ImgSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_ImgSet, _internal_metadata_));
  TmxMap_TileImg_descriptor_ = TmxMap_descriptor_->nested_type(3);
  static const int TmxMap_TileImg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileImg, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileImg, imgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileImg, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileImg, offset_),
  };
  TmxMap_TileImg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_TileImg_descriptor_,
      TmxMap_TileImg::internal_default_instance(),
      TmxMap_TileImg_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_TileImg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileImg, _internal_metadata_));
  TmxMap_TileInfo_descriptor_ = TmxMap_descriptor_->nested_type(4);
  static const int TmxMap_TileInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileInfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileInfo, y_),
  };
  TmxMap_TileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_TileInfo_descriptor_,
      TmxMap_TileInfo::internal_default_instance(),
      TmxMap_TileInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_TileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileInfo, _internal_metadata_));
  TmxMap_TileSetting_descriptor_ = TmxMap_descriptor_->nested_type(5);
  static const int TmxMap_TileSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileSetting, barrertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileSetting, trapindex_),
  };
  TmxMap_TileSetting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_TileSetting_descriptor_,
      TmxMap_TileSetting::internal_default_instance(),
      TmxMap_TileSetting_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_TileSetting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_TileSetting, _internal_metadata_));
  TmxMap_Layer_descriptor_ = TmxMap_descriptor_->nested_type(6);
  static const int TmxMap_Layer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Layer, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Layer, tiles_),
  };
  TmxMap_Layer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TmxMap_Layer_descriptor_,
      TmxMap_Layer::internal_default_instance(),
      TmxMap_Layer_offsets_,
      -1,
      -1,
      -1,
      sizeof(TmxMap_Layer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmxMap_Layer, _internal_metadata_));
  TmxMap_BarrerType_descriptor_ = TmxMap_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TmxMapMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_descriptor_, TmxMap::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_Rect_descriptor_, TmxMap_Rect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_Point_descriptor_, TmxMap_Point::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_ImgSet_descriptor_, TmxMap_ImgSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_TileImg_descriptor_, TmxMap_TileImg::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_TileInfo_descriptor_, TmxMap_TileInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_TileSetting_descriptor_, TmxMap_TileSetting::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TmxMap_Layer_descriptor_, TmxMap_Layer::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TmxMapMessage_2eproto() {
  TmxMap_default_instance_.Shutdown();
  delete TmxMap_reflection_;
  TmxMap_Rect_default_instance_.Shutdown();
  delete TmxMap_Rect_reflection_;
  TmxMap_Point_default_instance_.Shutdown();
  delete TmxMap_Point_reflection_;
  TmxMap_ImgSet_default_instance_.Shutdown();
  delete TmxMap_ImgSet_reflection_;
  TmxMap_TileImg_default_instance_.Shutdown();
  delete TmxMap_TileImg_reflection_;
  TmxMap_TileInfo_default_instance_.Shutdown();
  delete TmxMap_TileInfo_reflection_;
  TmxMap_TileSetting_default_instance_.Shutdown();
  delete TmxMap_TileSetting_reflection_;
  TmxMap_Layer_default_instance_.Shutdown();
  delete TmxMap_Layer_reflection_;
}

void protobuf_InitDefaults_TmxMapMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TmxMap_default_instance_.DefaultConstruct();
  TmxMap_Rect_default_instance_.DefaultConstruct();
  TmxMap_Point_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TmxMap_ImgSet_default_instance_.DefaultConstruct();
  TmxMap_TileImg_default_instance_.DefaultConstruct();
  TmxMap_TileInfo_default_instance_.DefaultConstruct();
  TmxMap_TileSetting_default_instance_.DefaultConstruct();
  TmxMap_Layer_default_instance_.DefaultConstruct();
  TmxMap_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_Rect_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_Point_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_ImgSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_TileImg_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_TileInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_TileSetting_default_instance_.get_mutable()->InitAsDefaultInstance();
  TmxMap_Layer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TmxMapMessage_2eproto_once_);
void protobuf_InitDefaults_TmxMapMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TmxMapMessage_2eproto_once_,
                 &protobuf_InitDefaults_TmxMapMessage_2eproto_impl);
}
void protobuf_AddDesc_TmxMapMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TmxMapMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TmxMapMessage.proto\022\005Proto\"\272\005\n\006TmxMap\022"
    "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\"\n\004imgs\030\003"
    " \003(\0132\024.Proto.TmxMap.ImgSet\022\'\n\010tileimgs\030\004"
    " \003(\0132\025.Proto.TmxMap.TileImg\022+\n\010settings\030"
    "\005 \003(\0132\031.Proto.TmxMap.TileSetting\022#\n\006laye"
    "rs\030\006 \003(\0132\023.Proto.TmxMap.Layer\0322\n\004Rect\022\t\n"
    "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\t\n\001h\030\004 \001("
    "\005\032\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032\026\n\006ImgS"
    "et\022\014\n\004path\030\001 \001(\t\032q\n\007TileImg\022\013\n\003gid\030\001 \001(\005"
    "\022\020\n\010imgindex\030\002 \001(\005\022\"\n\006region\030\003 \001(\0132\022.Pro"
    "to.TmxMap.Rect\022#\n\006offset\030\004 \001(\0132\023.Proto.T"
    "mxMap.Point\032-\n\010TileInfo\022\013\n\003gid\030\001 \001(\005\022\t\n\001"
    "x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\032N\n\013TileSetting\022,\n\nbar"
    "rertype\030\001 \001(\0162\030.Proto.TmxMap.BarrerType\022"
    "\021\n\ttrapindex\030\002 \001(\005\032=\n\005Layer\022\r\n\005index\030\001 \001"
    "(\005\022%\n\005tiles\030\002 \003(\0132\026.Proto.TmxMap.TileInf"
    "o\"V\n\nBarrerType\022\010\n\004None\020\000\022\014\n\010Obstacle\020\001\022"
    "\023\n\017CanOverObstacle\020\002\022\t\n\005Trans\020\003\022\020\n\014CanOV"
    "erTrans\020\004b\006proto3", 737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TmxMapMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TmxMapMessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TmxMapMessage_2eproto_once_);
void protobuf_AddDesc_TmxMapMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TmxMapMessage_2eproto_once_,
                 &protobuf_AddDesc_TmxMapMessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TmxMapMessage_2eproto {
  StaticDescriptorInitializer_TmxMapMessage_2eproto() {
    protobuf_AddDesc_TmxMapMessage_2eproto();
  }
} static_descriptor_initializer_TmxMapMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* TmxMap_BarrerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_BarrerType_descriptor_;
}
bool TmxMap_BarrerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TmxMap_BarrerType TmxMap::None;
const TmxMap_BarrerType TmxMap::Obstacle;
const TmxMap_BarrerType TmxMap::CanOverObstacle;
const TmxMap_BarrerType TmxMap::Trans;
const TmxMap_BarrerType TmxMap::CanOVerTrans;
const TmxMap_BarrerType TmxMap::BarrerType_MIN;
const TmxMap_BarrerType TmxMap::BarrerType_MAX;
const int TmxMap::BarrerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_Rect::kXFieldNumber;
const int TmxMap_Rect::kYFieldNumber;
const int TmxMap_Rect::kWFieldNumber;
const int TmxMap_Rect::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_Rect::TmxMap_Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Rect)
}

void TmxMap_Rect::InitAsDefaultInstance() {
}

TmxMap_Rect::TmxMap_Rect(const TmxMap_Rect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Rect)
}

void TmxMap_Rect::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_) + sizeof(h_));
  _cached_size_ = 0;
}

TmxMap_Rect::~TmxMap_Rect() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Rect)
  SharedDtor();
}

void TmxMap_Rect::SharedDtor() {
}

void TmxMap_Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_Rect_descriptor_;
}

const TmxMap_Rect& TmxMap_Rect::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Rect> TmxMap_Rect_default_instance_;

TmxMap_Rect* TmxMap_Rect::New(::google::protobuf::Arena* arena) const {
  TmxMap_Rect* n = new TmxMap_Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Rect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap_Rect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap_Rect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, h_);

#undef ZR_HELPER_
#undef ZR_

}

bool TmxMap_Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // optional int32 w = 3;
      case 3: {
        if (tag == 24) {
         parse_w:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // optional int32 h = 4;
      case 4: {
        if (tag == 32) {
         parse_h:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.Rect)
  return false;
#undef DO_
}

void TmxMap_Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.Rect)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 w = 3;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->w(), output);
  }

  // optional int32 h = 4;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->h(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.Rect)
}

::google::protobuf::uint8* TmxMap_Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Rect)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 w = 3;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->w(), target);
  }

  // optional int32 h = 4;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->h(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Rect)
  return target;
}

size_t TmxMap_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Rect)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 w = 3;
  if (this->w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  // optional int32 h = 4;
  if (this->h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Rect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Rect)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_Rect::MergeFrom(const TmxMap_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Rect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_Rect::UnsafeMergeFrom(const TmxMap_Rect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
}

void TmxMap_Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Rect::CopyFrom(const TmxMap_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Rect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_Rect::IsInitialized() const {

  return true;
}

void TmxMap_Rect::Swap(TmxMap_Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_Rect::InternalSwap(TmxMap_Rect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_Rect_descriptor_;
  metadata.reflection = TmxMap_Rect_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_Point::kXFieldNumber;
const int TmxMap_Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_Point::TmxMap_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Point)
}

void TmxMap_Point::InitAsDefaultInstance() {
}

TmxMap_Point::TmxMap_Point(const TmxMap_Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Point)
}

void TmxMap_Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

TmxMap_Point::~TmxMap_Point() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Point)
  SharedDtor();
}

void TmxMap_Point::SharedDtor() {
}

void TmxMap_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_Point_descriptor_;
}

const TmxMap_Point& TmxMap_Point::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Point> TmxMap_Point_default_instance_;

TmxMap_Point* TmxMap_Point::New(::google::protobuf::Arena* arena) const {
  TmxMap_Point* n = new TmxMap_Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap_Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap_Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool TmxMap_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.Point)
  return false;
#undef DO_
}

void TmxMap_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.Point)
}

::google::protobuf::uint8* TmxMap_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Point)
  return target;
}

size_t TmxMap_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Point)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Point)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_Point::MergeFrom(const TmxMap_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Point)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_Point::UnsafeMergeFrom(const TmxMap_Point& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void TmxMap_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Point::CopyFrom(const TmxMap_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Point)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_Point::IsInitialized() const {

  return true;
}

void TmxMap_Point::Swap(TmxMap_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_Point::InternalSwap(TmxMap_Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_Point_descriptor_;
  metadata.reflection = TmxMap_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_ImgSet::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_ImgSet::TmxMap_ImgSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.ImgSet)
}

void TmxMap_ImgSet::InitAsDefaultInstance() {
}

TmxMap_ImgSet::TmxMap_ImgSet(const TmxMap_ImgSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.ImgSet)
}

void TmxMap_ImgSet::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TmxMap_ImgSet::~TmxMap_ImgSet() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.ImgSet)
  SharedDtor();
}

void TmxMap_ImgSet::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TmxMap_ImgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_ImgSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_ImgSet_descriptor_;
}

const TmxMap_ImgSet& TmxMap_ImgSet::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_ImgSet> TmxMap_ImgSet_default_instance_;

TmxMap_ImgSet* TmxMap_ImgSet::New(::google::protobuf::Arena* arena) const {
  TmxMap_ImgSet* n = new TmxMap_ImgSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_ImgSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.ImgSet)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TmxMap_ImgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.ImgSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.TmxMap.ImgSet.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.ImgSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.ImgSet)
  return false;
#undef DO_
}

void TmxMap_ImgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.ImgSet)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.TmxMap.ImgSet.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.ImgSet)
}

::google::protobuf::uint8* TmxMap_ImgSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.ImgSet)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.TmxMap.ImgSet.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.ImgSet)
  return target;
}

size_t TmxMap_ImgSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.ImgSet)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_ImgSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.ImgSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_ImgSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_ImgSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.ImgSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.ImgSet)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_ImgSet::MergeFrom(const TmxMap_ImgSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.ImgSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_ImgSet::UnsafeMergeFrom(const TmxMap_ImgSet& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void TmxMap_ImgSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.ImgSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_ImgSet::CopyFrom(const TmxMap_ImgSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.ImgSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_ImgSet::IsInitialized() const {

  return true;
}

void TmxMap_ImgSet::Swap(TmxMap_ImgSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_ImgSet::InternalSwap(TmxMap_ImgSet* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_ImgSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_ImgSet_descriptor_;
  metadata.reflection = TmxMap_ImgSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_TileImg::kGidFieldNumber;
const int TmxMap_TileImg::kImgindexFieldNumber;
const int TmxMap_TileImg::kRegionFieldNumber;
const int TmxMap_TileImg::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_TileImg::TmxMap_TileImg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileImg)
}

void TmxMap_TileImg::InitAsDefaultInstance() {
  region_ = const_cast< ::Proto::TmxMap_Rect*>(
      ::Proto::TmxMap_Rect::internal_default_instance());
  offset_ = const_cast< ::Proto::TmxMap_Point*>(
      ::Proto::TmxMap_Point::internal_default_instance());
}

TmxMap_TileImg::TmxMap_TileImg(const TmxMap_TileImg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileImg)
}

void TmxMap_TileImg::SharedCtor() {
  region_ = NULL;
  offset_ = NULL;
  ::memset(&gid_, 0, reinterpret_cast<char*>(&imgindex_) -
    reinterpret_cast<char*>(&gid_) + sizeof(imgindex_));
  _cached_size_ = 0;
}

TmxMap_TileImg::~TmxMap_TileImg() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileImg)
  SharedDtor();
}

void TmxMap_TileImg::SharedDtor() {
  if (this != &TmxMap_TileImg_default_instance_.get()) {
    delete region_;
    delete offset_;
  }
}

void TmxMap_TileImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_TileImg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_TileImg_descriptor_;
}

const TmxMap_TileImg& TmxMap_TileImg::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileImg> TmxMap_TileImg_default_instance_;

TmxMap_TileImg* TmxMap_TileImg::New(::google::protobuf::Arena* arena) const {
  TmxMap_TileImg* n = new TmxMap_TileImg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_TileImg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileImg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap_TileImg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap_TileImg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, imgindex_);
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TmxMap_TileImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.TileImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_imgindex;
        break;
      }

      // optional int32 imgindex = 2;
      case 2: {
        if (tag == 16) {
         parse_imgindex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imgindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // optional .Proto.TmxMap.Rect region = 3;
      case 3: {
        if (tag == 26) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_offset;
        break;
      }

      // optional .Proto.TmxMap.Point offset = 4;
      case 4: {
        if (tag == 34) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.TileImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.TileImg)
  return false;
#undef DO_
}

void TmxMap_TileImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.TileImg)
  // optional int32 gid = 1;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // optional int32 imgindex = 2;
  if (this->imgindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imgindex(), output);
  }

  // optional .Proto.TmxMap.Rect region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_, output);
  }

  // optional .Proto.TmxMap.Point offset = 4;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.TileImg)
}

::google::protobuf::uint8* TmxMap_TileImg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileImg)
  // optional int32 gid = 1;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // optional int32 imgindex = 2;
  if (this->imgindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imgindex(), target);
  }

  // optional .Proto.TmxMap.Rect region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_, false, target);
  }

  // optional .Proto.TmxMap.Point offset = 4;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->offset_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileImg)
  return target;
}

size_t TmxMap_TileImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileImg)
  size_t total_size = 0;

  // optional int32 gid = 1;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  // optional int32 imgindex = 2;
  if (this->imgindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imgindex());
  }

  // optional .Proto.TmxMap.Rect region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .Proto.TmxMap.Point offset = 4;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_TileImg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileImg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_TileImg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_TileImg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileImg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileImg)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_TileImg::MergeFrom(const TmxMap_TileImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileImg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_TileImg::UnsafeMergeFrom(const TmxMap_TileImg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.imgindex() != 0) {
    set_imgindex(from.imgindex());
  }
  if (from.has_region()) {
    mutable_region()->::Proto::TmxMap_Rect::MergeFrom(from.region());
  }
  if (from.has_offset()) {
    mutable_offset()->::Proto::TmxMap_Point::MergeFrom(from.offset());
  }
}

void TmxMap_TileImg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileImg::CopyFrom(const TmxMap_TileImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileImg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_TileImg::IsInitialized() const {

  return true;
}

void TmxMap_TileImg::Swap(TmxMap_TileImg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_TileImg::InternalSwap(TmxMap_TileImg* other) {
  std::swap(gid_, other->gid_);
  std::swap(imgindex_, other->imgindex_);
  std::swap(region_, other->region_);
  std::swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_TileImg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_TileImg_descriptor_;
  metadata.reflection = TmxMap_TileImg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_TileInfo::kGidFieldNumber;
const int TmxMap_TileInfo::kXFieldNumber;
const int TmxMap_TileInfo::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_TileInfo::TmxMap_TileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileInfo)
}

void TmxMap_TileInfo::InitAsDefaultInstance() {
}

TmxMap_TileInfo::TmxMap_TileInfo(const TmxMap_TileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileInfo)
}

void TmxMap_TileInfo::SharedCtor() {
  ::memset(&gid_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&gid_) + sizeof(y_));
  _cached_size_ = 0;
}

TmxMap_TileInfo::~TmxMap_TileInfo() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileInfo)
  SharedDtor();
}

void TmxMap_TileInfo::SharedDtor() {
}

void TmxMap_TileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_TileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_TileInfo_descriptor_;
}

const TmxMap_TileInfo& TmxMap_TileInfo::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileInfo> TmxMap_TileInfo_default_instance_;

TmxMap_TileInfo* TmxMap_TileInfo::New(::google::protobuf::Arena* arena) const {
  TmxMap_TileInfo* n = new TmxMap_TileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_TileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap_TileInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap_TileInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool TmxMap_TileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.TileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.TileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.TileInfo)
  return false;
#undef DO_
}

void TmxMap_TileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.TileInfo)
  // optional int32 gid = 1;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.TileInfo)
}

::google::protobuf::uint8* TmxMap_TileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileInfo)
  // optional int32 gid = 1;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileInfo)
  return target;
}

size_t TmxMap_TileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileInfo)
  size_t total_size = 0;

  // optional int32 gid = 1;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_TileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_TileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_TileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileInfo)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_TileInfo::MergeFrom(const TmxMap_TileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_TileInfo::UnsafeMergeFrom(const TmxMap_TileInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void TmxMap_TileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileInfo::CopyFrom(const TmxMap_TileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_TileInfo::IsInitialized() const {

  return true;
}

void TmxMap_TileInfo::Swap(TmxMap_TileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_TileInfo::InternalSwap(TmxMap_TileInfo* other) {
  std::swap(gid_, other->gid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_TileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_TileInfo_descriptor_;
  metadata.reflection = TmxMap_TileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_TileSetting::kBarrertypeFieldNumber;
const int TmxMap_TileSetting::kTrapindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_TileSetting::TmxMap_TileSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileSetting)
}

void TmxMap_TileSetting::InitAsDefaultInstance() {
}

TmxMap_TileSetting::TmxMap_TileSetting(const TmxMap_TileSetting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileSetting)
}

void TmxMap_TileSetting::SharedCtor() {
  ::memset(&barrertype_, 0, reinterpret_cast<char*>(&trapindex_) -
    reinterpret_cast<char*>(&barrertype_) + sizeof(trapindex_));
  _cached_size_ = 0;
}

TmxMap_TileSetting::~TmxMap_TileSetting() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileSetting)
  SharedDtor();
}

void TmxMap_TileSetting::SharedDtor() {
}

void TmxMap_TileSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_TileSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_TileSetting_descriptor_;
}

const TmxMap_TileSetting& TmxMap_TileSetting::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileSetting> TmxMap_TileSetting_default_instance_;

TmxMap_TileSetting* TmxMap_TileSetting::New(::google::protobuf::Arena* arena) const {
  TmxMap_TileSetting* n = new TmxMap_TileSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_TileSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileSetting)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap_TileSetting, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap_TileSetting*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(barrertype_, trapindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool TmxMap_TileSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.TileSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.TmxMap.BarrerType barrertype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_barrertype(static_cast< ::Proto::TmxMap_BarrerType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trapindex;
        break;
      }

      // optional int32 trapindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trapindex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trapindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.TileSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.TileSetting)
  return false;
#undef DO_
}

void TmxMap_TileSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.TileSetting)
  // optional .Proto.TmxMap.BarrerType barrertype = 1;
  if (this->barrertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->barrertype(), output);
  }

  // optional int32 trapindex = 2;
  if (this->trapindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trapindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.TileSetting)
}

::google::protobuf::uint8* TmxMap_TileSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileSetting)
  // optional .Proto.TmxMap.BarrerType barrertype = 1;
  if (this->barrertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->barrertype(), target);
  }

  // optional int32 trapindex = 2;
  if (this->trapindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trapindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileSetting)
  return target;
}

size_t TmxMap_TileSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileSetting)
  size_t total_size = 0;

  // optional .Proto.TmxMap.BarrerType barrertype = 1;
  if (this->barrertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->barrertype());
  }

  // optional int32 trapindex = 2;
  if (this->trapindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trapindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_TileSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileSetting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_TileSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_TileSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileSetting)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_TileSetting::MergeFrom(const TmxMap_TileSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileSetting)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_TileSetting::UnsafeMergeFrom(const TmxMap_TileSetting& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.barrertype() != 0) {
    set_barrertype(from.barrertype());
  }
  if (from.trapindex() != 0) {
    set_trapindex(from.trapindex());
  }
}

void TmxMap_TileSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileSetting::CopyFrom(const TmxMap_TileSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileSetting)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_TileSetting::IsInitialized() const {

  return true;
}

void TmxMap_TileSetting::Swap(TmxMap_TileSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_TileSetting::InternalSwap(TmxMap_TileSetting* other) {
  std::swap(barrertype_, other->barrertype_);
  std::swap(trapindex_, other->trapindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_TileSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_TileSetting_descriptor_;
  metadata.reflection = TmxMap_TileSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap_Layer::kIndexFieldNumber;
const int TmxMap_Layer::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap_Layer::TmxMap_Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Layer)
}

void TmxMap_Layer::InitAsDefaultInstance() {
}

TmxMap_Layer::TmxMap_Layer(const TmxMap_Layer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Layer)
}

void TmxMap_Layer::SharedCtor() {
  index_ = 0;
  _cached_size_ = 0;
}

TmxMap_Layer::~TmxMap_Layer() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Layer)
  SharedDtor();
}

void TmxMap_Layer::SharedDtor() {
}

void TmxMap_Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap_Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_Layer_descriptor_;
}

const TmxMap_Layer& TmxMap_Layer::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Layer> TmxMap_Layer_default_instance_;

TmxMap_Layer* TmxMap_Layer::New(::google::protobuf::Arena* arena) const {
  TmxMap_Layer* n = new TmxMap_Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Layer)
  index_ = 0;
  tiles_.Clear();
}

bool TmxMap_Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tiles;
        break;
      }

      // repeated .Proto.TmxMap.TileInfo tiles = 2;
      case 2: {
        if (tag == 18) {
         parse_tiles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tiles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap.Layer)
  return false;
#undef DO_
}

void TmxMap_Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap.Layer)
  // optional int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  for (unsigned int i = 0, n = this->tiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tiles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap.Layer)
}

::google::protobuf::uint8* TmxMap_Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Layer)
  // optional int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  for (unsigned int i = 0, n = this->tiles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tiles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Layer)
  return target;
}

size_t TmxMap_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Layer)
  size_t total_size = 0;

  // optional int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  {
    unsigned int count = this->tiles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiles(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap_Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Layer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap_Layer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap_Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Layer)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap_Layer::MergeFrom(const TmxMap_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Layer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap_Layer::UnsafeMergeFrom(const TmxMap_Layer& from) {
  GOOGLE_DCHECK(&from != this);
  tiles_.MergeFrom(from.tiles_);
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void TmxMap_Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Layer::CopyFrom(const TmxMap_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Layer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap_Layer::IsInitialized() const {

  return true;
}

void TmxMap_Layer::Swap(TmxMap_Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap_Layer::InternalSwap(TmxMap_Layer* other) {
  std::swap(index_, other->index_);
  tiles_.UnsafeArenaSwap(&other->tiles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap_Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_Layer_descriptor_;
  metadata.reflection = TmxMap_Layer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TmxMap::kWidthFieldNumber;
const int TmxMap::kHeightFieldNumber;
const int TmxMap::kImgsFieldNumber;
const int TmxMap::kTileimgsFieldNumber;
const int TmxMap::kSettingsFieldNumber;
const int TmxMap::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TmxMap::TmxMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TmxMapMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap)
}

void TmxMap::InitAsDefaultInstance() {
}

TmxMap::TmxMap(const TmxMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap)
}

void TmxMap::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

TmxMap::~TmxMap() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap)
  SharedDtor();
}

void TmxMap::SharedDtor() {
}

void TmxMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmxMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmxMap_descriptor_;
}

const TmxMap& TmxMap::default_instance() {
  protobuf_InitDefaults_TmxMapMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TmxMap> TmxMap_default_instance_;

TmxMap* TmxMap::New(::google::protobuf::Arena* arena) const {
  TmxMap* n = new TmxMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TmxMap::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TmxMap, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TmxMap*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  imgs_.Clear();
  tileimgs_.Clear();
  settings_.Clear();
  layers_.Clear();
}

bool TmxMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TmxMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imgs;
        break;
      }

      // repeated .Proto.TmxMap.ImgSet imgs = 3;
      case 3: {
        if (tag == 26) {
         parse_imgs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_imgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_imgs;
        if (input->ExpectTag(34)) goto parse_loop_tileimgs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Proto.TmxMap.TileImg tileimgs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tileimgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tileimgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tileimgs;
        if (input->ExpectTag(42)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Proto.TmxMap.TileSetting settings = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_settings;
        if (input->ExpectTag(50)) goto parse_loop_layers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Proto.TmxMap.Layer layers = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_layers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TmxMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TmxMap)
  return false;
#undef DO_
}

void TmxMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TmxMap)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  for (unsigned int i = 0, n = this->imgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imgs(i), output);
  }

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  for (unsigned int i = 0, n = this->tileimgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tileimgs(i), output);
  }

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->settings(i), output);
  }

  // repeated .Proto.TmxMap.Layer layers = 6;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->layers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TmxMap)
}

::google::protobuf::uint8* TmxMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  for (unsigned int i = 0, n = this->imgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->imgs(i), false, target);
  }

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  for (unsigned int i = 0, n = this->tileimgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tileimgs(i), false, target);
  }

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->settings(i), false, target);
  }

  // repeated .Proto.TmxMap.Layer layers = 6;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->layers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap)
  return target;
}

size_t TmxMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap)
  size_t total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  {
    unsigned int count = this->imgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imgs(i));
    }
  }

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  {
    unsigned int count = this->tileimgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tileimgs(i));
    }
  }

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  {
    unsigned int count = this->settings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings(i));
    }
  }

  // repeated .Proto.TmxMap.Layer layers = 6;
  {
    unsigned int count = this->layers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmxMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TmxMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TmxMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap)
    UnsafeMergeFrom(*source);
  }
}

void TmxMap::MergeFrom(const TmxMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TmxMap::UnsafeMergeFrom(const TmxMap& from) {
  GOOGLE_DCHECK(&from != this);
  imgs_.MergeFrom(from.imgs_);
  tileimgs_.MergeFrom(from.tileimgs_);
  settings_.MergeFrom(from.settings_);
  layers_.MergeFrom(from.layers_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void TmxMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap::CopyFrom(const TmxMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TmxMap::IsInitialized() const {

  return true;
}

void TmxMap::Swap(TmxMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TmxMap::InternalSwap(TmxMap* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  imgs_.UnsafeArenaSwap(&other->imgs_);
  tileimgs_.UnsafeArenaSwap(&other->tileimgs_);
  settings_.UnsafeArenaSwap(&other->settings_);
  layers_.UnsafeArenaSwap(&other->layers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TmxMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmxMap_descriptor_;
  metadata.reflection = TmxMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TmxMap_Rect

// optional int32 x = 1;
void TmxMap_Rect::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 TmxMap_Rect::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.x)
  return x_;
}
void TmxMap_Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.x)
}

// optional int32 y = 2;
void TmxMap_Rect::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 TmxMap_Rect::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.y)
  return y_;
}
void TmxMap_Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.y)
}

// optional int32 w = 3;
void TmxMap_Rect::clear_w() {
  w_ = 0;
}
::google::protobuf::int32 TmxMap_Rect::w() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.w)
  return w_;
}
void TmxMap_Rect::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.w)
}

// optional int32 h = 4;
void TmxMap_Rect::clear_h() {
  h_ = 0;
}
::google::protobuf::int32 TmxMap_Rect::h() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.h)
  return h_;
}
void TmxMap_Rect::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.h)
}

inline const TmxMap_Rect* TmxMap_Rect::internal_default_instance() {
  return &TmxMap_Rect_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_Point

// optional int32 x = 1;
void TmxMap_Point::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 TmxMap_Point::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.x)
  return x_;
}
void TmxMap_Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.x)
}

// optional int32 y = 2;
void TmxMap_Point::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 TmxMap_Point::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.y)
  return y_;
}
void TmxMap_Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.y)
}

inline const TmxMap_Point* TmxMap_Point::internal_default_instance() {
  return &TmxMap_Point_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_ImgSet

// optional string path = 1;
void TmxMap_ImgSet::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TmxMap_ImgSet::path() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.ImgSet.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TmxMap_ImgSet::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.ImgSet.path)
}
void TmxMap_ImgSet::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TmxMap.ImgSet.path)
}
void TmxMap_ImgSet::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TmxMap.ImgSet.path)
}
::std::string* TmxMap_ImgSet::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.ImgSet.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TmxMap_ImgSet::release_path() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.ImgSet.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TmxMap_ImgSet::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.ImgSet.path)
}

inline const TmxMap_ImgSet* TmxMap_ImgSet::internal_default_instance() {
  return &TmxMap_ImgSet_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileImg

// optional int32 gid = 1;
void TmxMap_TileImg::clear_gid() {
  gid_ = 0;
}
::google::protobuf::int32 TmxMap_TileImg::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.gid)
  return gid_;
}
void TmxMap_TileImg::set_gid(::google::protobuf::int32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.gid)
}

// optional int32 imgindex = 2;
void TmxMap_TileImg::clear_imgindex() {
  imgindex_ = 0;
}
::google::protobuf::int32 TmxMap_TileImg::imgindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.imgindex)
  return imgindex_;
}
void TmxMap_TileImg::set_imgindex(::google::protobuf::int32 value) {
  
  imgindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.imgindex)
}

// optional .Proto.TmxMap.Rect region = 3;
bool TmxMap_TileImg::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void TmxMap_TileImg::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::Proto::TmxMap_Rect& TmxMap_TileImg::region() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.region)
  return region_ != NULL ? *region_
                         : *::Proto::TmxMap_Rect::internal_default_instance();
}
::Proto::TmxMap_Rect* TmxMap_TileImg::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::Proto::TmxMap_Rect;
  }
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.region)
  return region_;
}
::Proto::TmxMap_Rect* TmxMap_TileImg::release_region() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.region)
  
  ::Proto::TmxMap_Rect* temp = region_;
  region_ = NULL;
  return temp;
}
void TmxMap_TileImg::set_allocated_region(::Proto::TmxMap_Rect* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.region)
}

// optional .Proto.TmxMap.Point offset = 4;
bool TmxMap_TileImg::has_offset() const {
  return this != internal_default_instance() && offset_ != NULL;
}
void TmxMap_TileImg::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::Proto::TmxMap_Point& TmxMap_TileImg::offset() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.offset)
  return offset_ != NULL ? *offset_
                         : *::Proto::TmxMap_Point::internal_default_instance();
}
::Proto::TmxMap_Point* TmxMap_TileImg::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::Proto::TmxMap_Point;
  }
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.offset)
  return offset_;
}
::Proto::TmxMap_Point* TmxMap_TileImg::release_offset() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.offset)
  
  ::Proto::TmxMap_Point* temp = offset_;
  offset_ = NULL;
  return temp;
}
void TmxMap_TileImg::set_allocated_offset(::Proto::TmxMap_Point* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.offset)
}

inline const TmxMap_TileImg* TmxMap_TileImg::internal_default_instance() {
  return &TmxMap_TileImg_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileInfo

// optional int32 gid = 1;
void TmxMap_TileInfo::clear_gid() {
  gid_ = 0;
}
::google::protobuf::int32 TmxMap_TileInfo::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.gid)
  return gid_;
}
void TmxMap_TileInfo::set_gid(::google::protobuf::int32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.gid)
}

// optional int32 x = 2;
void TmxMap_TileInfo::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 TmxMap_TileInfo::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.x)
  return x_;
}
void TmxMap_TileInfo::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.x)
}

// optional int32 y = 3;
void TmxMap_TileInfo::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 TmxMap_TileInfo::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.y)
  return y_;
}
void TmxMap_TileInfo::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.y)
}

inline const TmxMap_TileInfo* TmxMap_TileInfo::internal_default_instance() {
  return &TmxMap_TileInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileSetting

// optional .Proto.TmxMap.BarrerType barrertype = 1;
void TmxMap_TileSetting::clear_barrertype() {
  barrertype_ = 0;
}
::Proto::TmxMap_BarrerType TmxMap_TileSetting::barrertype() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.barrertype)
  return static_cast< ::Proto::TmxMap_BarrerType >(barrertype_);
}
void TmxMap_TileSetting::set_barrertype(::Proto::TmxMap_BarrerType value) {
  
  barrertype_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.barrertype)
}

// optional int32 trapindex = 2;
void TmxMap_TileSetting::clear_trapindex() {
  trapindex_ = 0;
}
::google::protobuf::int32 TmxMap_TileSetting::trapindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.trapindex)
  return trapindex_;
}
void TmxMap_TileSetting::set_trapindex(::google::protobuf::int32 value) {
  
  trapindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.trapindex)
}

inline const TmxMap_TileSetting* TmxMap_TileSetting::internal_default_instance() {
  return &TmxMap_TileSetting_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_Layer

// optional int32 index = 1;
void TmxMap_Layer::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 TmxMap_Layer::index() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.index)
  return index_;
}
void TmxMap_Layer::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Layer.index)
}

// repeated .Proto.TmxMap.TileInfo tiles = 2;
int TmxMap_Layer::tiles_size() const {
  return tiles_.size();
}
void TmxMap_Layer::clear_tiles() {
  tiles_.Clear();
}
const ::Proto::TmxMap_TileInfo& TmxMap_Layer::tiles(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.tiles)
  return tiles_.Get(index);
}
::Proto::TmxMap_TileInfo* TmxMap_Layer::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.Layer.tiles)
  return tiles_.Mutable(index);
}
::Proto::TmxMap_TileInfo* TmxMap_Layer::add_tiles() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.Layer.tiles)
  return tiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >*
TmxMap_Layer::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.Layer.tiles)
  return &tiles_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >&
TmxMap_Layer::tiles() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.Layer.tiles)
  return tiles_;
}

inline const TmxMap_Layer* TmxMap_Layer::internal_default_instance() {
  return &TmxMap_Layer_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap

// optional int32 width = 1;
void TmxMap::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 TmxMap::width() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.width)
  return width_;
}
void TmxMap::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.width)
}

// optional int32 height = 2;
void TmxMap::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 TmxMap::height() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.height)
  return height_;
}
void TmxMap::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.height)
}

// repeated .Proto.TmxMap.ImgSet imgs = 3;
int TmxMap::imgs_size() const {
  return imgs_.size();
}
void TmxMap::clear_imgs() {
  imgs_.Clear();
}
const ::Proto::TmxMap_ImgSet& TmxMap::imgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.imgs)
  return imgs_.Get(index);
}
::Proto::TmxMap_ImgSet* TmxMap::mutable_imgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.imgs)
  return imgs_.Mutable(index);
}
::Proto::TmxMap_ImgSet* TmxMap::add_imgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.imgs)
  return imgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >*
TmxMap::mutable_imgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.imgs)
  return &imgs_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >&
TmxMap::imgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.imgs)
  return imgs_;
}

// repeated .Proto.TmxMap.TileImg tileimgs = 4;
int TmxMap::tileimgs_size() const {
  return tileimgs_.size();
}
void TmxMap::clear_tileimgs() {
  tileimgs_.Clear();
}
const ::Proto::TmxMap_TileImg& TmxMap::tileimgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.tileimgs)
  return tileimgs_.Get(index);
}
::Proto::TmxMap_TileImg* TmxMap::mutable_tileimgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.tileimgs)
  return tileimgs_.Mutable(index);
}
::Proto::TmxMap_TileImg* TmxMap::add_tileimgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.tileimgs)
  return tileimgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >*
TmxMap::mutable_tileimgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.tileimgs)
  return &tileimgs_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >&
TmxMap::tileimgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.tileimgs)
  return tileimgs_;
}

// repeated .Proto.TmxMap.TileSetting settings = 5;
int TmxMap::settings_size() const {
  return settings_.size();
}
void TmxMap::clear_settings() {
  settings_.Clear();
}
const ::Proto::TmxMap_TileSetting& TmxMap::settings(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.settings)
  return settings_.Get(index);
}
::Proto::TmxMap_TileSetting* TmxMap::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.settings)
  return settings_.Mutable(index);
}
::Proto::TmxMap_TileSetting* TmxMap::add_settings() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >*
TmxMap::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >&
TmxMap::settings() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.settings)
  return settings_;
}

// repeated .Proto.TmxMap.Layer layers = 6;
int TmxMap::layers_size() const {
  return layers_.size();
}
void TmxMap::clear_layers() {
  layers_.Clear();
}
const ::Proto::TmxMap_Layer& TmxMap::layers(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.layers)
  return layers_.Get(index);
}
::Proto::TmxMap_Layer* TmxMap::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.layers)
  return layers_.Mutable(index);
}
::Proto::TmxMap_Layer* TmxMap::add_layers() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >*
TmxMap::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >&
TmxMap::layers() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.layers)
  return layers_;
}

inline const TmxMap* TmxMap::internal_default_instance() {
  return &TmxMap_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
