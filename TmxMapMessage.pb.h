// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TmxMapMessage.proto

#ifndef PROTOBUF_TmxMapMessage_2eproto__INCLUDED
#define PROTOBUF_TmxMapMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TmxMapMessage_2eproto();
void protobuf_InitDefaults_TmxMapMessage_2eproto();
void protobuf_AssignDesc_TmxMapMessage_2eproto();
void protobuf_ShutdownFile_TmxMapMessage_2eproto();

class TmxMap;
class TmxMap_ImgSet;
class TmxMap_Layer;
class TmxMap_Point;
class TmxMap_Rect;
class TmxMap_TileImg;
class TmxMap_TileInfo;
class TmxMap_TileSetting;

enum TmxMap_BarrerType {
  TmxMap_BarrerType_None = 0,
  TmxMap_BarrerType_Obstacle = 1,
  TmxMap_BarrerType_CanOverObstacle = 2,
  TmxMap_BarrerType_Trans = 3,
  TmxMap_BarrerType_CanOVerTrans = 4,
  TmxMap_BarrerType_TmxMap_BarrerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TmxMap_BarrerType_TmxMap_BarrerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TmxMap_BarrerType_IsValid(int value);
const TmxMap_BarrerType TmxMap_BarrerType_BarrerType_MIN = TmxMap_BarrerType_None;
const TmxMap_BarrerType TmxMap_BarrerType_BarrerType_MAX = TmxMap_BarrerType_CanOVerTrans;
const int TmxMap_BarrerType_BarrerType_ARRAYSIZE = TmxMap_BarrerType_BarrerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TmxMap_BarrerType_descriptor();
inline const ::std::string& TmxMap_BarrerType_Name(TmxMap_BarrerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TmxMap_BarrerType_descriptor(), value);
}
inline bool TmxMap_BarrerType_Parse(
    const ::std::string& name, TmxMap_BarrerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TmxMap_BarrerType>(
    TmxMap_BarrerType_descriptor(), name, value);
}
// ===================================================================

class TmxMap_Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Rect) */ {
 public:
  TmxMap_Rect();
  virtual ~TmxMap_Rect();

  TmxMap_Rect(const TmxMap_Rect& from);

  inline TmxMap_Rect& operator=(const TmxMap_Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_Rect& default_instance();

  static const TmxMap_Rect* internal_default_instance();

  void Swap(TmxMap_Rect* other);

  // implements Message ----------------------------------------------

  inline TmxMap_Rect* New() const { return New(NULL); }

  TmxMap_Rect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_Rect& from);
  void MergeFrom(const TmxMap_Rect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_Rect* other);
  void UnsafeMergeFrom(const TmxMap_Rect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 w = 3;
  void clear_w();
  static const int kWFieldNumber = 3;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // optional int32 h = 4;
  void clear_h();
  static const int kHFieldNumber = 4;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Rect> TmxMap_Rect_default_instance_;

// -------------------------------------------------------------------

class TmxMap_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Point) */ {
 public:
  TmxMap_Point();
  virtual ~TmxMap_Point();

  TmxMap_Point(const TmxMap_Point& from);

  inline TmxMap_Point& operator=(const TmxMap_Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_Point& default_instance();

  static const TmxMap_Point* internal_default_instance();

  void Swap(TmxMap_Point* other);

  // implements Message ----------------------------------------------

  inline TmxMap_Point* New() const { return New(NULL); }

  TmxMap_Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_Point& from);
  void MergeFrom(const TmxMap_Point& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_Point* other);
  void UnsafeMergeFrom(const TmxMap_Point& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Point> TmxMap_Point_default_instance_;

// -------------------------------------------------------------------

class TmxMap_ImgSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.ImgSet) */ {
 public:
  TmxMap_ImgSet();
  virtual ~TmxMap_ImgSet();

  TmxMap_ImgSet(const TmxMap_ImgSet& from);

  inline TmxMap_ImgSet& operator=(const TmxMap_ImgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_ImgSet& default_instance();

  static const TmxMap_ImgSet* internal_default_instance();

  void Swap(TmxMap_ImgSet* other);

  // implements Message ----------------------------------------------

  inline TmxMap_ImgSet* New() const { return New(NULL); }

  TmxMap_ImgSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_ImgSet& from);
  void MergeFrom(const TmxMap_ImgSet& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_ImgSet* other);
  void UnsafeMergeFrom(const TmxMap_ImgSet& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.ImgSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_ImgSet> TmxMap_ImgSet_default_instance_;

// -------------------------------------------------------------------

class TmxMap_TileImg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileImg) */ {
 public:
  TmxMap_TileImg();
  virtual ~TmxMap_TileImg();

  TmxMap_TileImg(const TmxMap_TileImg& from);

  inline TmxMap_TileImg& operator=(const TmxMap_TileImg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_TileImg& default_instance();

  static const TmxMap_TileImg* internal_default_instance();

  void Swap(TmxMap_TileImg* other);

  // implements Message ----------------------------------------------

  inline TmxMap_TileImg* New() const { return New(NULL); }

  TmxMap_TileImg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_TileImg& from);
  void MergeFrom(const TmxMap_TileImg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_TileImg* other);
  void UnsafeMergeFrom(const TmxMap_TileImg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gid = 1;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  ::google::protobuf::int32 gid() const;
  void set_gid(::google::protobuf::int32 value);

  // optional int32 imgindex = 2;
  void clear_imgindex();
  static const int kImgindexFieldNumber = 2;
  ::google::protobuf::int32 imgindex() const;
  void set_imgindex(::google::protobuf::int32 value);

  // optional .Proto.TmxMap.Rect region = 3;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::Proto::TmxMap_Rect& region() const;
  ::Proto::TmxMap_Rect* mutable_region();
  ::Proto::TmxMap_Rect* release_region();
  void set_allocated_region(::Proto::TmxMap_Rect* region);

  // optional .Proto.TmxMap.Point offset = 4;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  const ::Proto::TmxMap_Point& offset() const;
  ::Proto::TmxMap_Point* mutable_offset();
  ::Proto::TmxMap_Point* release_offset();
  void set_allocated_offset(::Proto::TmxMap_Point* offset);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileImg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::TmxMap_Rect* region_;
  ::Proto::TmxMap_Point* offset_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 imgindex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileImg> TmxMap_TileImg_default_instance_;

// -------------------------------------------------------------------

class TmxMap_TileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileInfo) */ {
 public:
  TmxMap_TileInfo();
  virtual ~TmxMap_TileInfo();

  TmxMap_TileInfo(const TmxMap_TileInfo& from);

  inline TmxMap_TileInfo& operator=(const TmxMap_TileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_TileInfo& default_instance();

  static const TmxMap_TileInfo* internal_default_instance();

  void Swap(TmxMap_TileInfo* other);

  // implements Message ----------------------------------------------

  inline TmxMap_TileInfo* New() const { return New(NULL); }

  TmxMap_TileInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_TileInfo& from);
  void MergeFrom(const TmxMap_TileInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_TileInfo* other);
  void UnsafeMergeFrom(const TmxMap_TileInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gid = 1;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  ::google::protobuf::int32 gid() const;
  void set_gid(::google::protobuf::int32 value);

  // optional int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileInfo> TmxMap_TileInfo_default_instance_;

// -------------------------------------------------------------------

class TmxMap_TileSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileSetting) */ {
 public:
  TmxMap_TileSetting();
  virtual ~TmxMap_TileSetting();

  TmxMap_TileSetting(const TmxMap_TileSetting& from);

  inline TmxMap_TileSetting& operator=(const TmxMap_TileSetting& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_TileSetting& default_instance();

  static const TmxMap_TileSetting* internal_default_instance();

  void Swap(TmxMap_TileSetting* other);

  // implements Message ----------------------------------------------

  inline TmxMap_TileSetting* New() const { return New(NULL); }

  TmxMap_TileSetting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_TileSetting& from);
  void MergeFrom(const TmxMap_TileSetting& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_TileSetting* other);
  void UnsafeMergeFrom(const TmxMap_TileSetting& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Proto.TmxMap.BarrerType barrertype = 1;
  void clear_barrertype();
  static const int kBarrertypeFieldNumber = 1;
  ::Proto::TmxMap_BarrerType barrertype() const;
  void set_barrertype(::Proto::TmxMap_BarrerType value);

  // optional int32 trapindex = 2;
  void clear_trapindex();
  static const int kTrapindexFieldNumber = 2;
  ::google::protobuf::int32 trapindex() const;
  void set_trapindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileSetting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int barrertype_;
  ::google::protobuf::int32 trapindex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_TileSetting> TmxMap_TileSetting_default_instance_;

// -------------------------------------------------------------------

class TmxMap_Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Layer) */ {
 public:
  TmxMap_Layer();
  virtual ~TmxMap_Layer();

  TmxMap_Layer(const TmxMap_Layer& from);

  inline TmxMap_Layer& operator=(const TmxMap_Layer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap_Layer& default_instance();

  static const TmxMap_Layer* internal_default_instance();

  void Swap(TmxMap_Layer* other);

  // implements Message ----------------------------------------------

  inline TmxMap_Layer* New() const { return New(NULL); }

  TmxMap_Layer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap_Layer& from);
  void MergeFrom(const TmxMap_Layer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap_Layer* other);
  void UnsafeMergeFrom(const TmxMap_Layer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  const ::Proto::TmxMap_TileInfo& tiles(int index) const;
  ::Proto::TmxMap_TileInfo* mutable_tiles(int index);
  ::Proto::TmxMap_TileInfo* add_tiles();
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >*
      mutable_tiles();
  const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >&
      tiles() const;

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo > tiles_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap_Layer> TmxMap_Layer_default_instance_;

// -------------------------------------------------------------------

class TmxMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap) */ {
 public:
  TmxMap();
  virtual ~TmxMap();

  TmxMap(const TmxMap& from);

  inline TmxMap& operator=(const TmxMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmxMap& default_instance();

  static const TmxMap* internal_default_instance();

  void Swap(TmxMap* other);

  // implements Message ----------------------------------------------

  inline TmxMap* New() const { return New(NULL); }

  TmxMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmxMap& from);
  void MergeFrom(const TmxMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TmxMap* other);
  void UnsafeMergeFrom(const TmxMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TmxMap_Rect Rect;
  typedef TmxMap_Point Point;
  typedef TmxMap_ImgSet ImgSet;
  typedef TmxMap_TileImg TileImg;
  typedef TmxMap_TileInfo TileInfo;
  typedef TmxMap_TileSetting TileSetting;
  typedef TmxMap_Layer Layer;

  typedef TmxMap_BarrerType BarrerType;
  static const BarrerType None =
    TmxMap_BarrerType_None;
  static const BarrerType Obstacle =
    TmxMap_BarrerType_Obstacle;
  static const BarrerType CanOverObstacle =
    TmxMap_BarrerType_CanOverObstacle;
  static const BarrerType Trans =
    TmxMap_BarrerType_Trans;
  static const BarrerType CanOVerTrans =
    TmxMap_BarrerType_CanOVerTrans;
  static inline bool BarrerType_IsValid(int value) {
    return TmxMap_BarrerType_IsValid(value);
  }
  static const BarrerType BarrerType_MIN =
    TmxMap_BarrerType_BarrerType_MIN;
  static const BarrerType BarrerType_MAX =
    TmxMap_BarrerType_BarrerType_MAX;
  static const int BarrerType_ARRAYSIZE =
    TmxMap_BarrerType_BarrerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BarrerType_descriptor() {
    return TmxMap_BarrerType_descriptor();
  }
  static inline const ::std::string& BarrerType_Name(BarrerType value) {
    return TmxMap_BarrerType_Name(value);
  }
  static inline bool BarrerType_Parse(const ::std::string& name,
      BarrerType* value) {
    return TmxMap_BarrerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  int imgs_size() const;
  void clear_imgs();
  static const int kImgsFieldNumber = 3;
  const ::Proto::TmxMap_ImgSet& imgs(int index) const;
  ::Proto::TmxMap_ImgSet* mutable_imgs(int index);
  ::Proto::TmxMap_ImgSet* add_imgs();
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >*
      mutable_imgs();
  const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >&
      imgs() const;

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  int tileimgs_size() const;
  void clear_tileimgs();
  static const int kTileimgsFieldNumber = 4;
  const ::Proto::TmxMap_TileImg& tileimgs(int index) const;
  ::Proto::TmxMap_TileImg* mutable_tileimgs(int index);
  ::Proto::TmxMap_TileImg* add_tileimgs();
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >*
      mutable_tileimgs();
  const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >&
      tileimgs() const;

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 5;
  const ::Proto::TmxMap_TileSetting& settings(int index) const;
  ::Proto::TmxMap_TileSetting* mutable_settings(int index);
  ::Proto::TmxMap_TileSetting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >&
      settings() const;

  // repeated .Proto.TmxMap.Layer layers = 6;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 6;
  const ::Proto::TmxMap_Layer& layers(int index) const;
  ::Proto::TmxMap_Layer* mutable_layers(int index);
  ::Proto::TmxMap_Layer* add_layers();
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:Proto.TmxMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet > imgs_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg > tileimgs_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting > settings_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer > layers_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TmxMapMessage_2eproto_impl();
  friend void  protobuf_AddDesc_TmxMapMessage_2eproto_impl();
  friend void protobuf_AssignDesc_TmxMapMessage_2eproto();
  friend void protobuf_ShutdownFile_TmxMapMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TmxMap> TmxMap_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TmxMap_Rect

// optional int32 x = 1;
inline void TmxMap_Rect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Rect::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.x)
  return x_;
}
inline void TmxMap_Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.x)
}

// optional int32 y = 2;
inline void TmxMap_Rect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Rect::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.y)
  return y_;
}
inline void TmxMap_Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.y)
}

// optional int32 w = 3;
inline void TmxMap_Rect::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Rect::w() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.w)
  return w_;
}
inline void TmxMap_Rect::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.w)
}

// optional int32 h = 4;
inline void TmxMap_Rect::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Rect::h() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.h)
  return h_;
}
inline void TmxMap_Rect::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.h)
}

inline const TmxMap_Rect* TmxMap_Rect::internal_default_instance() {
  return &TmxMap_Rect_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_Point

// optional int32 x = 1;
inline void TmxMap_Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Point::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.x)
  return x_;
}
inline void TmxMap_Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.x)
}

// optional int32 y = 2;
inline void TmxMap_Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Point::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.y)
  return y_;
}
inline void TmxMap_Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.y)
}

inline const TmxMap_Point* TmxMap_Point::internal_default_instance() {
  return &TmxMap_Point_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_ImgSet

// optional string path = 1;
inline void TmxMap_ImgSet::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TmxMap_ImgSet::path() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.ImgSet.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TmxMap_ImgSet::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.ImgSet.path)
}
inline void TmxMap_ImgSet::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TmxMap.ImgSet.path)
}
inline void TmxMap_ImgSet::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TmxMap.ImgSet.path)
}
inline ::std::string* TmxMap_ImgSet::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.ImgSet.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TmxMap_ImgSet::release_path() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.ImgSet.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TmxMap_ImgSet::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.ImgSet.path)
}

inline const TmxMap_ImgSet* TmxMap_ImgSet::internal_default_instance() {
  return &TmxMap_ImgSet_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileImg

// optional int32 gid = 1;
inline void TmxMap_TileImg::clear_gid() {
  gid_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileImg::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.gid)
  return gid_;
}
inline void TmxMap_TileImg::set_gid(::google::protobuf::int32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.gid)
}

// optional int32 imgindex = 2;
inline void TmxMap_TileImg::clear_imgindex() {
  imgindex_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileImg::imgindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.imgindex)
  return imgindex_;
}
inline void TmxMap_TileImg::set_imgindex(::google::protobuf::int32 value) {
  
  imgindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.imgindex)
}

// optional .Proto.TmxMap.Rect region = 3;
inline bool TmxMap_TileImg::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline void TmxMap_TileImg::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::Proto::TmxMap_Rect& TmxMap_TileImg::region() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.region)
  return region_ != NULL ? *region_
                         : *::Proto::TmxMap_Rect::internal_default_instance();
}
inline ::Proto::TmxMap_Rect* TmxMap_TileImg::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::Proto::TmxMap_Rect;
  }
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.region)
  return region_;
}
inline ::Proto::TmxMap_Rect* TmxMap_TileImg::release_region() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.region)
  
  ::Proto::TmxMap_Rect* temp = region_;
  region_ = NULL;
  return temp;
}
inline void TmxMap_TileImg::set_allocated_region(::Proto::TmxMap_Rect* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.region)
}

// optional .Proto.TmxMap.Point offset = 4;
inline bool TmxMap_TileImg::has_offset() const {
  return this != internal_default_instance() && offset_ != NULL;
}
inline void TmxMap_TileImg::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
inline const ::Proto::TmxMap_Point& TmxMap_TileImg::offset() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.offset)
  return offset_ != NULL ? *offset_
                         : *::Proto::TmxMap_Point::internal_default_instance();
}
inline ::Proto::TmxMap_Point* TmxMap_TileImg::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::Proto::TmxMap_Point;
  }
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.offset)
  return offset_;
}
inline ::Proto::TmxMap_Point* TmxMap_TileImg::release_offset() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.offset)
  
  ::Proto::TmxMap_Point* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline void TmxMap_TileImg::set_allocated_offset(::Proto::TmxMap_Point* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.offset)
}

inline const TmxMap_TileImg* TmxMap_TileImg::internal_default_instance() {
  return &TmxMap_TileImg_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileInfo

// optional int32 gid = 1;
inline void TmxMap_TileInfo::clear_gid() {
  gid_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileInfo::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.gid)
  return gid_;
}
inline void TmxMap_TileInfo::set_gid(::google::protobuf::int32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.gid)
}

// optional int32 x = 2;
inline void TmxMap_TileInfo::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileInfo::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.x)
  return x_;
}
inline void TmxMap_TileInfo::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.x)
}

// optional int32 y = 3;
inline void TmxMap_TileInfo::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileInfo::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.y)
  return y_;
}
inline void TmxMap_TileInfo::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.y)
}

inline const TmxMap_TileInfo* TmxMap_TileInfo::internal_default_instance() {
  return &TmxMap_TileInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_TileSetting

// optional .Proto.TmxMap.BarrerType barrertype = 1;
inline void TmxMap_TileSetting::clear_barrertype() {
  barrertype_ = 0;
}
inline ::Proto::TmxMap_BarrerType TmxMap_TileSetting::barrertype() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.barrertype)
  return static_cast< ::Proto::TmxMap_BarrerType >(barrertype_);
}
inline void TmxMap_TileSetting::set_barrertype(::Proto::TmxMap_BarrerType value) {
  
  barrertype_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.barrertype)
}

// optional int32 trapindex = 2;
inline void TmxMap_TileSetting::clear_trapindex() {
  trapindex_ = 0;
}
inline ::google::protobuf::int32 TmxMap_TileSetting::trapindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.trapindex)
  return trapindex_;
}
inline void TmxMap_TileSetting::set_trapindex(::google::protobuf::int32 value) {
  
  trapindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.trapindex)
}

inline const TmxMap_TileSetting* TmxMap_TileSetting::internal_default_instance() {
  return &TmxMap_TileSetting_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap_Layer

// optional int32 index = 1;
inline void TmxMap_Layer::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 TmxMap_Layer::index() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.index)
  return index_;
}
inline void TmxMap_Layer::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Layer.index)
}

// repeated .Proto.TmxMap.TileInfo tiles = 2;
inline int TmxMap_Layer::tiles_size() const {
  return tiles_.size();
}
inline void TmxMap_Layer::clear_tiles() {
  tiles_.Clear();
}
inline const ::Proto::TmxMap_TileInfo& TmxMap_Layer::tiles(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.tiles)
  return tiles_.Get(index);
}
inline ::Proto::TmxMap_TileInfo* TmxMap_Layer::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.Layer.tiles)
  return tiles_.Mutable(index);
}
inline ::Proto::TmxMap_TileInfo* TmxMap_Layer::add_tiles() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.Layer.tiles)
  return tiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >*
TmxMap_Layer::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.Layer.tiles)
  return &tiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileInfo >&
TmxMap_Layer::tiles() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.Layer.tiles)
  return tiles_;
}

inline const TmxMap_Layer* TmxMap_Layer::internal_default_instance() {
  return &TmxMap_Layer_default_instance_.get();
}
// -------------------------------------------------------------------

// TmxMap

// optional int32 width = 1;
inline void TmxMap::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TmxMap::width() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.width)
  return width_;
}
inline void TmxMap::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.width)
}

// optional int32 height = 2;
inline void TmxMap::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TmxMap::height() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.height)
  return height_;
}
inline void TmxMap::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Proto.TmxMap.height)
}

// repeated .Proto.TmxMap.ImgSet imgs = 3;
inline int TmxMap::imgs_size() const {
  return imgs_.size();
}
inline void TmxMap::clear_imgs() {
  imgs_.Clear();
}
inline const ::Proto::TmxMap_ImgSet& TmxMap::imgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.imgs)
  return imgs_.Get(index);
}
inline ::Proto::TmxMap_ImgSet* TmxMap::mutable_imgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.imgs)
  return imgs_.Mutable(index);
}
inline ::Proto::TmxMap_ImgSet* TmxMap::add_imgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.imgs)
  return imgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >*
TmxMap::mutable_imgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.imgs)
  return &imgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_ImgSet >&
TmxMap::imgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.imgs)
  return imgs_;
}

// repeated .Proto.TmxMap.TileImg tileimgs = 4;
inline int TmxMap::tileimgs_size() const {
  return tileimgs_.size();
}
inline void TmxMap::clear_tileimgs() {
  tileimgs_.Clear();
}
inline const ::Proto::TmxMap_TileImg& TmxMap::tileimgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.tileimgs)
  return tileimgs_.Get(index);
}
inline ::Proto::TmxMap_TileImg* TmxMap::mutable_tileimgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.tileimgs)
  return tileimgs_.Mutable(index);
}
inline ::Proto::TmxMap_TileImg* TmxMap::add_tileimgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.tileimgs)
  return tileimgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >*
TmxMap::mutable_tileimgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.tileimgs)
  return &tileimgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileImg >&
TmxMap::tileimgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.tileimgs)
  return tileimgs_;
}

// repeated .Proto.TmxMap.TileSetting settings = 5;
inline int TmxMap::settings_size() const {
  return settings_.size();
}
inline void TmxMap::clear_settings() {
  settings_.Clear();
}
inline const ::Proto::TmxMap_TileSetting& TmxMap::settings(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.settings)
  return settings_.Get(index);
}
inline ::Proto::TmxMap_TileSetting* TmxMap::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.settings)
  return settings_.Mutable(index);
}
inline ::Proto::TmxMap_TileSetting* TmxMap::add_settings() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >*
TmxMap::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_TileSetting >&
TmxMap::settings() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.settings)
  return settings_;
}

// repeated .Proto.TmxMap.Layer layers = 6;
inline int TmxMap::layers_size() const {
  return layers_.size();
}
inline void TmxMap::clear_layers() {
  layers_.Clear();
}
inline const ::Proto::TmxMap_Layer& TmxMap::layers(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.layers)
  return layers_.Get(index);
}
inline ::Proto::TmxMap_Layer* TmxMap::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.layers)
  return layers_.Mutable(index);
}
inline ::Proto::TmxMap_Layer* TmxMap::add_layers() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >*
TmxMap::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TmxMap_Layer >&
TmxMap::layers() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.layers)
  return layers_;
}

inline const TmxMap* TmxMap::internal_default_instance() {
  return &TmxMap_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Proto::TmxMap_BarrerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::TmxMap_BarrerType>() {
  return ::Proto::TmxMap_BarrerType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TmxMapMessage_2eproto__INCLUDED
